{"version":3,"file":"immox.module.js","sources":["../index.ts"],"sourcesContent":["import { useMemo, useState, useCallback } from 'react'\r\nimport { Draft, produce, immerable } from 'immer'\r\n\r\nconst immox = Symbol('immox')\r\ntype Getter = { get: () => any; dependents: (string | number | symbol)[] }\r\n\r\n//export function producer<T>(target: T) : any\r\nexport function producer<T>(\r\n  target: T,\r\n  prop?: string | number | symbol,\r\n  d?: PropertyDescriptor\r\n): any {\r\n  // producer(fn)\r\n  if (arguments.length === 1 && typeof target === 'function') {\r\n    return function producer(...args: any) {\r\n      //@ts-ignore\r\n      return produce(this, (draft: any) => {\r\n        target.apply(draft, args)\r\n      })\r\n    }\r\n  }\r\n  // producer(prototype, \"prop\")\r\n  // @producer fn\r\n  //@ts-ignore\r\n  const descriptor = d || Object.getOwnPropertyDescriptor(target, prop)\r\n  if (!descriptor)\r\n    throw new Error(\r\n      //@ts-ignore\r\n      `Property '${prop}' does not exist on the specified target (tip: make sure to pass 'Class.prototype', not just 'Class')`\r\n    )\r\n  const { value } = descriptor\r\n  if (typeof value !== 'function')\r\n    throw new Error(`@producer should be used on methods only, got: ${typeof value}`)\r\n  const newDescriptor: PropertyDescriptor = {\r\n    ...descriptor,\r\n    value: producer(value),\r\n  }\r\n  //target[immerable] = true\r\n  //@ts-ignore\r\n  if (!d) Object.defineProperty(target, prop, newDescriptor)\r\n  else return newDescriptor\r\n}\r\n\r\nexport function useImmox<S = any>(\r\n  initialValue: S | (() => S)\r\n): [S, (f: (draft: Draft<S>) => void | S) => void]\r\nexport function useImmox(initialState: any) {\r\n  useMemo(() => {\r\n    /* const getters: Map<string, Getter> = new Map()\r\n    const dependents: Set<string | number | symbol> = new Set()\r\n    const proxy = new Proxy(initialState, {\r\n      get: function(target, name) {\r\n        dependents.add(name)\r\n      },\r\n    })\r\n    let desc: {\r\n      [key: string]: PropertyDescriptor\r\n    } = Object.getOwnPropertyDescriptors(initialState)\r\n    let initialStateProto = initialState\r\n    let tyoeObject = 'Literal'\r\n    if (!(Object.getPrototypeOf(initialState).constructor.name === 'Object')) {\r\n      desc = {\r\n        ...Object.getOwnPropertyDescriptors(Object.getPrototypeOf(initialState)),\r\n        ...desc,\r\n      }\r\n      tyoeObject = 'Class'\r\n      delete desc['constructor']\r\n    }\r\n    console.log(tyoeObject)\r\n    let meth = false\r\n    Object.keys(desc).forEach(prop => {\r\n      //console.log(prop, Object.keys(desc[prop]))\r\n      if (desc[prop] && desc[prop].get) {\r\n        //@ts-ignore\r\n        const getFunc = desc[prop].get \r\n        const defaultValue = getFunc.call(proxy)\r\n        Object.defineProperty(initialState, prop, {\r\n          //@ts-ignore\r\n          value: desc[prop].get.call(initialState),\r\n          writable: true,\r\n          enumerable: true,\r\n          configurable: true,\r\n        })\r\n        //@ts-ignore\r\n        getters.set(prop, { get: desc[prop].get, dependents: Array.from(dependents) })\r\n        dependents.clear()\r\n        console.log(\r\n          'set',\r\n          prop,\r\n          Object.getOwnPropertyDescriptor(initialState, prop),\r\n          //@ts-ignore\r\n          desc[prop].get.toString,\r\n          //@ts-ignore\r\n          desc[prop].get.toString(),\r\n          //@ts-ignore\r\n          desc[prop].get.apply(proxy)\r\n        )\r\n      }\r\n      //https://github.com/immerjs/immer/pull/312\r\n      if (desc[prop] && typeof desc[prop].value === 'function' && prop !== 'constructor') {\r\n        Object.defineProperty(initialState, prop, {\r\n          value: function producer(...args: any) {\r\n            return produce(this, (draft: any) => {\r\n              console.log('producer')\r\n              desc[prop].value.apply(draft, args)\r\n            })\r\n          },\r\n          ...desc[prop],\r\n        })\r\n        meth = true\r\n      }\r\n      if (prop === 'addx') {\r\n        console.log(\r\n          prop,\r\n          meth,\r\n          Object.getOwnPropertyDescriptor(initialState, prop),\r\n          Object.getOwnPropertyDescriptor(Object.getPrototypeOf(initialState), prop),\r\n          '###############',\r\n          tyoeObject,\r\n          initialState[prop].toString()\r\n        )\r\n      }\r\n    })\r\n    initialState[immox] = getters */\r\n\r\n    if (Object.getPrototypeOf(initialState).constructor.name === 'Object') {\r\n      const descrit = Object.getOwnPropertyDescriptors(initialState)\r\n      let obj = {}\r\n      let proto = {}\r\n      Object.keys(descrit).forEach(prop => {\r\n        if (typeof descrit[prop].value === 'function' || descrit[prop].set) {\r\n          proto = { ...descrit, ...proto }\r\n        } else {\r\n          obj = { ...descrit, ...obj }\r\n        }\r\n      })\r\n      initialState = Object.create({}, obj)\r\n      Object.setPrototypeOf(initialState, Object.create({}, proto))\r\n      console.log('Object Literal')\r\n    } else {\r\n      console.log('Class')\r\n    }\r\n\r\n  /*   if (Object.keys(Object.getPrototypeOf(initialState)).includes('add')) {\r\n      producer(Object.getPrototypeOf(initialState), 'add')\r\n      console.log(initialState.add.toString())\r\n    } */\r\n\r\n    //initialState[immerable] = true\r\n\r\n    /*    if (!(Object.getPrototypeOf(initialState).constructor.name === 'Object')) {\r\n      initialState = Object.create(\r\n        initialState,\r\n        Object.getOwnPropertyDescriptors(Object.getPrototypeOf(initialState))\r\n      )\r\n    }\r\n    const getters: Map<string, Getter> = new Map()\r\n    const dependents: Set<string | number | symbol> = new Set()\r\n    const proxy = new Proxy(initialState, {\r\n      get: function(target, name) {\r\n        dependents.add(name)\r\n      },\r\n    })\r\n    let keys: string[] = Object.keys(initialState)\r\n    //let objType = 'Literal'\r\n    //     if (!(Object.getPrototypeOf(initialState).constructor.name === 'Object')) {\r\n    //  keys = [\r\n    //    ...Object.keys(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(initialState))),\r\n    //    //...Object.keys(initialState),\r\n    //  ]\r\n    //  objType = 'Class'\r\n    } \r\n    keys.forEach(prop => {\r\n      let desc = Object.getOwnPropertyDescriptor(initialState, prop)\r\n      if (desc && desc.get) {\r\n        Object.defineProperty(initialState, prop, { value: desc.get.call(proxy) })\r\n        getters.set(prop, { get: desc.get, dependents: Array.from(dependents) })\r\n        dependents.clear()\r\n        //console.log(objType, prop, '################3333')\r\n      }\r\n      //https://github.com/immerjs/immer/pull/312\r\n      if (desc && desc.value && typeof desc.value === 'function' && prop !== 'constructor') {\r\n                Object.defineProperty(initialState, prop, {\r\n          value: function producer(...args: any) {\r\n            return produce(this, (draft: any) => {\r\n              //@ts-ignore\r\n              desc.value.apply(draft, args) \r\n            })\r\n          },\r\n          ...desc,\r\n        }) \r\n        producer(initialState, prop)\r\n        console.log('producer')\r\n      }\r\n    })\r\n\r\n    initialState[immox] = getters\r\n    //initialState[immerable] = true\r\n\r\n    console.log(objType, getters.size, '%%%') */\r\n\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const [state, updateState] = useState(initialState)\r\n  const updateDraft = useCallback(updater => {\r\n    updateState(produce(updater))\r\n  }, [])\r\n\r\n  /*   state[immox].forEach((value: Getter, prop: string) => {\r\n    const dependents = value.dependents.map(dependent => state[dependent])\r\n    //eslint-disable-next-line react-hooks/rules-of-hooks\r\n    useMemo(() => {\r\n      updateDraft((d: Draft<any>) => {\r\n        d[prop] = value.get.call(d)\r\n      })\r\n      //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, dependents)\r\n  }) */\r\n\r\n  return [state, updateDraft]\r\n}\r\n\r\nexport default useImmox\r\n\r\ntype SetState = <S = any>(f: (draft: Draft<S>) => void | S) => void\r\nexport { Draft, SetState }\r\n"],"names":["producer","target","prop","d","arguments","length","produce","this","draft","apply","args","descriptor","Object","getOwnPropertyDescriptor","Error","value","newDescriptor","defineProperty","useImmox","initialState","useMemo","getPrototypeOf","constructor","name","descrit","getOwnPropertyDescriptors","obj","proto","keys","forEach","set","create","setPrototypeOf","console","log","useState","useCallback","updater","updateState"],"mappings":"wGAOgBA,EACdC,EACAC,EACAC,MAGyB,IAArBC,UAAUC,QAAkC,mBAAXJ,SAC5B,yEAEEK,EAAQC,cAAOC,GACpBP,EAAOQ,MAAMD,EAAOE,UAOpBC,EAAaR,GAAKS,OAAOC,yBAAyBZ,EAAQC,OAC3DS,EACH,MAAM,IAAIG,mBAEKZ,2GAETa,iBACa,mBAAVA,EACT,MAAM,IAAID,+DAA+DC,OACrEC,EAAoCJ,iBACrCD,GACHI,MAAOf,EAASe,QAIbZ,EACA,OAAOa,EADJJ,OAAOK,eAAehB,EAAQC,EAAMc,YAO9BE,EAASC,GACvBC,gBA8E+D,WAAzDR,OAAOS,eAAeF,GAAcG,YAAYC,KAAmB,KAC/DC,EAAUZ,OAAOa,0BAA0BN,GAC7CO,EAAM,GACNC,EAAQ,GACZf,OAAOgB,KAAKJ,GAASK,iBAAQ3B,GACQ,mBAAxBsB,EAAQtB,GAAMa,OAAwBS,EAAQtB,GAAM4B,IAC7DH,EAAQf,iBAAKY,KAEbE,EAAMd,iBAAKY,OAGfL,EAAeP,OAAOmB,OAAO,GAAIL,GACjCd,OAAOoB,eAAeb,EAAcP,OAAOmB,OAAO,GAAIJ,IACtDM,QAAQC,IAAI,uBAEZD,QAAQC,IAAI,UA8Db,UAE0BC,EAAShB,gBAgB/B,MAfaiB,WAAYC,GAC9BC,EAAYhC,EAAQ+B,KACnB"}